{
  "swagger": "2.0",
  "info": {
    "description": "API for perform FlashGas related operations.",
    "title": "Flashgas Macro API",
    "contact": {},
    "version": "0.1"
  },
  "basePath": "/",
  "paths": {
    "/drivers": {
      "get": {
        "description": "Get many drivers using pagination",
        "produces": ["application/json"],
        "tags": ["Drivers"],
        "summary": "Get Drivers",
        "parameters": [
          {
            "type": "integer",
            "description": "page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page size",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Which sub-structures you wanna retrieve from each driver separate by ' , '. no value means all relations, values can be details, address, metadata, payment or none. \nIE: `localhost:8080/{id}?relations=details,address`",
            "name": "relations",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.DriverPagination"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "post": {
        "description": "Create an Driver by JSON body",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Drivers"],
        "summary": "Create Driver",
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.Driver"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      }
    },
    "/drivers/{id}": {
      "get": {
        "description": "Retrieve a Driver from Database by ID",
        "produces": ["application/json"],
        "tags": ["Drivers"],
        "summary": "Get Driver by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Driver ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Which sub-structures you wanna retrieve from the driver separate by ' , '. no value means all relations, values can be details, address, metadata, payment or none. \nIE: `localhost:8080/{id}?relations=details,address`",
            "name": "relations",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.Driver"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "put": {
        "description": "Update a Driver obtained through its id using the request body JSON",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Drivers"],
        "summary": "Update Driver",
        "parameters": [
          {
            "type": "string",
            "description": "Driver ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Which sub-structures you wanna retrieve from Driver separate by ' , '. no value means all relations, values can be details, address, metadata, payment or none.\nIE: `localhost:8080/{id}?relations=details,address`",
            "name": "relations",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/models.Driver"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an Driver by ID",
        "produces": ["application/json"],
        "tags": ["Drivers"],
        "summary": "Delete Driver",
        "parameters": [
          {
            "type": "string",
            "description": "Driver ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "description": "Get many Orders using pagination",
        "produces": ["application/json"],
        "tags": ["Orders"],
        "summary": "Get Orders",
        "parameters": [
          {
            "type": "integer",
            "description": "page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page size",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.OrderPagination"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "post": {
        "description": "Create an Order through JSON body",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Orders"],
        "summary": "Create Order",
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.FirebaseOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "description": "Retrieve a Order from Database by ID",
        "produces": ["application/json"],
        "tags": ["Orders"],
        "summary": "Get Order by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Which sub-structures you wanna retrieve from the user separate by ' , '. no value means all relations, values can be address, metadata, payment or none. \nIE: `localhost:8080/?relations=address,payment`",
            "name": "relations",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.FirebaseOrder"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "put": {
        "description": "Update a Order obtained through its id using the request JSON body",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Orders"],
        "summary": "Update Order",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/models.FirebaseOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an order by ID",
        "produces": ["application/json"],
        "tags": ["Orders"],
        "summary": "Delete Order",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Get many Users using pagination",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get Users",
        "parameters": [
          {
            "type": "integer",
            "description": "page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "page size",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Which sub-structures you wanna retrieve from each user separate by ' , '. no value means all relations, values can be address, metadata, payment or none. \nIE: `localhost:8080/?relations=address,payment`",
            "name": "relations",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.UserPagination"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "post": {
        "description": "Create an User through JSON body",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Create User",
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/models.User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieve a User from Database by ID",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get User by ID",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Which sub-structures you wanna retrieve from the user separate by ' , '. no value means all relations, values can be address, metadata, payment or none. \nIE: `localhost:8080/?relations=address,payment`",
            "name": "relations",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/models.User"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "put": {
        "description": "Update a user obtained through its id using the request JSON body",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update User",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Which sub-structures you wanna retrieve from the user separate by ' , '. no value means all relations, values can be address, metadata, payment or none. \nIE: `localhost:8080/?relations=address,payment`",
            "name": "relations",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/models.User"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an user by ID",
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Delete User",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/utils.Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "models.Credits": {
      "type": "object",
      "properties": {
        "credits": {
          "type": "integer"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "models.Driver": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/models.DriverAddress"
        },
        "app_metadata": {
          "$ref": "#/definitions/models.DriverAppMetadata"
        },
        "balance": {
          "description": "Balance float64 - string",
          "type": "number"
        },
        "birth_date": {
          "description": "Fecha de nacimiento",
          "type": "string"
        },
        "current_order": {
          "description": "Pedido en curso",
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/models.DriverDetails"
        },
        "email": {
          "description": "email",
          "type": "string"
        },
        "first_name": {
          "description": "Firstname",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "description": "Apellido",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "order_count": {
          "description": "num pedidos / Pedidos realizados float64 - string",
          "type": "number"
        },
        "payment_info": {
          "$ref": "#/definitions/models.DriverPaymentInfo"
        },
        "phone": {
          "description": "phone",
          "type": "string"
        },
        "phone_without_lada": {
          "description": "telefono sin lada",
          "type": "string"
        },
        "photo_url": {
          "description": "photoURL",
          "type": "string"
        },
        "secondary_phone": {
          "description": "Telefono secundario",
          "type": "string"
        },
        "status": {
          "description": "status",
          "type": "string"
        }
      }
    },
    "models.DriverAddress": {
      "type": "object",
      "properties": {
        "latitude": {
          "description": "latitude vinculada",
          "type": "number"
        },
        "longitude": {
          "description": "longitude vinculada",
          "type": "number"
        },
        "zone_id": {
          "description": "id vinculada",
          "type": "string"
        },
        "zone_name": {
          "description": "Zone name",
          "type": "string"
        }
      }
    },
    "models.DriverAppMetadata": {
      "type": "object",
      "properties": {
        "average_rating": {
          "description": "Calificacion promedio",
          "type": "number"
        },
        "ban_reason": {
          "description": "Razon",
          "type": "string"
        },
        "cloud_messaging_tokens": {
          "description": "cloudMessagingTokens",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "online": {
          "description": "Online",
          "type": "string"
        },
        "rating": {
          "description": "calificacion",
          "type": "number"
        }
      }
    },
    "models.DriverDetails": {
      "type": "object",
      "properties": {
        "approval_date": {
          "description": "Fecha aprobado",
          "type": "number"
        },
        "id_back_photo": {
          "description": "ID trasera",
          "type": "string"
        },
        "ine_photo": {
          "description": "Foto INE",
          "type": "string"
        },
        "photo_insurance": {
          "description": "Foto seguro",
          "type": "string"
        },
        "plates": {
          "description": "Placas",
          "type": "string"
        },
        "profile_pic": {
          "description": "Foto perfil",
          "type": "string"
        },
        "retailer_id": {
          "description": "Retailer vinculado",
          "type": "string"
        },
        "vehicle": {
          "description": "Vehiculo",
          "type": "string"
        },
        "vehicle_photo": {
          "description": "Foto auto",
          "type": "string"
        }
      }
    },
    "models.DriverPagination": {
      "type": "object",
      "properties": {
        "currentPage": {
          "type": "integer"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.Driver"
          }
        },
        "next": {
          "type": "integer"
        },
        "pagination": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "paginationCount": {
          "type": "integer"
        },
        "paginationSize": {
          "type": "integer"
        },
        "prev": {
          "type": "integer"
        }
      }
    },
    "models.DriverPaymentInfo": {
      "type": "object",
      "properties": {
        "ach_account_number": {
          "description": "ACH account number",
          "type": "string"
        },
        "ach_routing": {
          "description": "ACH Routing",
          "type": "string"
        },
        "cash_tag": {
          "description": "Cashtag ??? veremos",
          "type": "string"
        },
        "payout_mode": {
          "description": "Payout mode ???",
          "type": "string"
        },
        "zelle_email": {
          "description": "Zelle email",
          "type": "string"
        },
        "zelle_phone": {
          "description": "Zelle phone",
          "type": "string"
        }
      }
    },
    "models.DriverStatus": {
      "type": "object",
      "properties": {
        "Repartidor id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "models.FirebaseMemberReferralData": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code",
          "type": "string"
        },
        "timestamp": {
          "description": "timestamp",
          "type": "number"
        },
        "user_id": {
          "description": "user_id",
          "type": "string"
        }
      }
    },
    "models.FirebaseOrder": {
      "type": "object",
      "properties": {
        "Aceptar tarjeta": {
          "description": "if service 1, 2, 3 == if AcceptCard -\u003e RetailerBalance = subtotal, DriverBalance = Delivery + tip | else -\u003e DriverBalance = Subtotal + Delivery + Tip",
          "type": "string"
        },
        "Balance repartidor": {
          "description": "total to pay to driver",
          "type": "number"
        },
        "Balance restaurante": {
          "description": "total to pay to retailer",
          "type": "number"
        },
        "Bobtail Truck": {
          "description": "bool -\u003e \"1\" true or \"\" false ////////////////// check why this field can be a float",
          "type": "number"
        },
        "Brand": {
          "type": "string"
        },
        "Cliente First Name": {
          "type": "string"
        },
        "Cliente Last Name": {
          "type": "string"
        },
        "Cliente id": {
          "type": "string"
        },
        "Cliente name": {
          "type": "string"
        },
        "Cliente telefono": {
          "type": "string"
        },
        "Cliente telefono no lada": {
          "type": "string"
        },
        "Comision amigo": {
          "type": "number"
        },
        "Comision envio": {
          "type": "number"
        },
        "Confirm PaymentIntent": {
          "description": "payment charge id from payarc confirmed",
          "type": "string"
        },
        "Descripcion": {
          "type": "string"
        },
        "Direccion": {
          "type": "string"
        },
        "Direccion negocio": {
          "type": "string"
        },
        "Direccion vinculada": {
          "type": "string"
        },
        "Distancia": {
          "description": "Distance between retailer and delivery address",
          "type": "string"
        },
        "Driver status": {
          "type": "string"
        },
        "ETA": {
          "description": "timestamp",
          "type": "integer"
        },
        "Email cliente": {
          "type": "string"
        },
        "Email retailer": {
          "type": "string"
        },
        "Envio": {
          "description": "SubTotalDelivery + DeliveryFee",
          "type": "number"
        },
        "Esquema de pago": {
          "description": "extract from zonedata",
          "type": "string"
        },
        "Exchange Tank": {
          "description": "bool -\u003e \"1\" true or \"\" false",
          "type": "string"
        },
        "Foto repartidor": {
          "type": "string"
        },
        "Foto usuario": {
          "type": "string"
        },
        "Fotos delivered tanks": {
          "type": "string"
        },
        "Fotos exchange tanks": {
          "type": "string"
        },
        "Franquicia email": {
          "type": "string"
        },
        "Franquicia telefono": {
          "type": "string"
        },
        "Franquicia vinculada": {
          "type": "string"
        },
        "Historial reparti": {
          "description": "Completed orders count",
          "type": "number"
        },
        "ID vinculada": {
          "type": "string"
        },
        "Logo amigo": {
          "type": "string"
        },
        "Negocio id": {
          "type": "string"
        },
        "No Orden": {
          "type": "string"
        },
        "Nombre amigo": {
          "type": "string"
        },
        "Orden id": {
          "description": "#XXXXX digits",
          "type": "string"
        },
        "Pago": {
          "description": "\"Tarjeta\"",
          "type": "string"
        },
        "Pago default": {
          "type": "string"
        },
        "Pago restaurante": {
          "description": "string - float64",
          "type": "number"
        },
        "Payment intent": {
          "description": "payment charge id from payarc",
          "type": "string"
        },
        "Portable Tank": {
          "description": "bool -\u003e \"1\" true or \"\" false",
          "type": "string"
        },
        "Productos": {},
        "Promedio reparti": {
          "type": "string"
        },
        "Propina": {
          "type": "number"
        },
        "Referencia": {
          "type": "string"
        },
        "Refill Tank": {
          "description": "bool -\u003e \"1\" true or \"\" false",
          "type": "string"
        },
        "Repartidor calificacion": {
          "type": "number"
        },
        "Repartidor comentarios": {
          "type": "string"
        },
        "Repartidor id": {
          "type": "string"
        },
        "Repartidor name": {
          "type": "string"
        },
        "Repartidor telefono": {
          "type": "string"
        },
        "Repartidores notificados": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/models.DriverStatus"
          }
        },
        "Servicio": {
          "type": "number"
        },
        "Sistema Operativo": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "Sub comision amigo": {
          "type": "number"
        },
        "Sub comision envio": {
          "type": "number"
        },
        "Subtotal": {
          "description": "SubTotalRetailer + RetailerFee",
          "type": "number"
        },
        "Subtotal amigos con %": {
          "type": "number"
        },
        "Subtotal envio con %": {
          "type": "number"
        },
        "Telefono negocio": {
          "type": "string"
        },
        "Time aceptado": {
          "type": "integer"
        },
        "Time entregando": {
          "type": "integer"
        },
        "Time orden lista": {
          "type": "integer"
        },
        "Time pedido": {
          "type": "integer"
        },
        "Time preparando": {
          "type": "integer"
        },
        "Total": {
          "type": "number"
        },
        "Total comision exxpres": {
          "type": "number"
        },
        "Zona vinculada": {
          "type": "string"
        },
        "cashback_percent": {
          "type": "number"
        },
        "city": {
          "type": "string"
        },
        "credit_multiplier": {
          "type": "number"
        },
        "credits": {
          "description": "-\u003e how much credits client receives from cashback == subtotal * credit_multiplier * cashback_percent",
          "type": "number"
        },
        "credits_apply": {
          "description": "-\u003e empty string or CreditsApply object",
          "allOf": [
            {
              "$ref": "#/definitions/models.Credits"
            }
          ]
        },
        "currency_code": {
          "description": "USD",
          "type": "string"
        },
        "form_id": {
          "description": "only if is service 4",
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "latitude negocio": {
          "type": "number"
        },
        "latitude original": {
          "type": "number"
        },
        "latitude vinculada": {
          "type": "number"
        },
        "level": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "longitude negocio": {
          "type": "number"
        },
        "longitude original": {
          "type": "number"
        },
        "longitude vinculada": {
          "type": "number"
        },
        "price_per_gallon": {
          "description": "only service 4",
          "type": "number"
        },
        "products_label": {
          "type": "string"
        },
        "products_label_retailer": {
          "type": "string"
        },
        "recurring_order": {
          "description": "if not empty copy's from this order ID",
          "type": "string"
        },
        "referral_reward": {
          "$ref": "#/definitions/models.ReferralReward"
        },
        "rewards_applied": {
          "$ref": "#/definitions/models.RewardsApplied"
        },
        "short_address": {
          "type": "string"
        },
        "tank_photo": {
          "type": "string"
        },
        "total_with_discounts": {
          "description": "new total if are credits applied or coupons used \u003e\u003e check how has to be store this shit -------------- handling of this field from apphive has to be fixed",
          "type": "number"
        },
        "type_service": {
          "type": "string"
        },
        "type_service_text": {
          "type": "string"
        }
      }
    },
    "models.OrderPagination": {
      "type": "object",
      "properties": {
        "currentPage": {
          "type": "integer"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.FirebaseOrder"
          }
        },
        "next": {
          "type": "integer"
        },
        "pagination": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "paginationCount": {
          "type": "integer"
        },
        "paginationSize": {
          "type": "integer"
        },
        "prev": {
          "type": "integer"
        }
      }
    },
    "models.ReferralReward": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "value": {
          "description": "Reward * RetailerFee, Reward comes from rewards_settings[0] \u003e\u003e referral_reward",
          "type": "string"
        }
      }
    },
    "models.RewardsApplied": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "profit": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "models.TankPhoto": {
      "type": "object",
      "properties": {
        "src": {
          "type": "string"
        }
      }
    },
    "models.User": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/models.UserAddress"
        },
        "birthday": {
          "description": "Cumpleaños",
          "type": "string"
        },
        "cloud_messaging_tokens": {
          "description": "Tokens de mensajería",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "description": "Fecha de creación",
          "type": "number"
        },
        "email": {
          "description": "Email",
          "type": "string"
        },
        "first_name": {
          "description": "Nombre",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "description": "Apellido",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/models.UserMetadata"
        },
        "name": {
          "type": "string"
        },
        "payment_info": {
          "$ref": "#/definitions/models.UserPaymentInfo"
        },
        "phone": {
          "description": "Teléfono",
          "type": "string"
        },
        "phone_without_lada": {
          "description": "Teléfono sin lada",
          "type": "string"
        },
        "photo_url": {
          "description": "URL de la foto",
          "type": "string"
        },
        "status": {
          "description": "Estado",
          "type": "string"
        }
      }
    },
    "models.UserAddress": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Dirección",
          "type": "string"
        },
        "address_id": {
          "description": "ID de dirección",
          "type": "string"
        },
        "city": {
          "description": "Ciudad",
          "type": "string"
        },
        "lat": {
          "description": "Latitud",
          "type": "number"
        },
        "lon": {
          "description": "Longitud",
          "type": "number"
        },
        "place_tag": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "short_address": {
          "type": "string"
        },
        "zone_id": {
          "description": "ID de la zona",
          "type": "string"
        },
        "zone_name": {
          "description": "Nombre de la zona",
          "type": "string"
        }
      }
    },
    "models.UserMetadata": {
      "type": "object",
      "properties": {
        "ban_description": {
          "description": "Información adicional",
          "type": "string"
        },
        "description": {
          "description": "Descripción",
          "type": "string"
        },
        "favorite_retailers": {
          "description": "Minoristas favoritos"
        },
        "first_login_reward": {
          "description": "Recompensa por primer inicio de sesión",
          "type": "string"
        },
        "has_referred": {
          "description": "Pantalla referido",
          "type": "string"
        },
        "index_timestamp": {
          "description": "Timestamp de índice",
          "type": "string"
        },
        "level": {
          "description": "Nivel",
          "type": "number"
        },
        "os": {
          "description": "Sistema operativo",
          "type": "string"
        },
        "ownership_tank": {
          "description": "ID del formulario",
          "type": "string"
        },
        "progress": {
          "description": "Progreso",
          "type": "number"
        },
        "provider": {
          "description": "Proveedor",
          "type": "string"
        },
        "rating": {
          "description": "Valoración",
          "type": "string"
        },
        "referral_data": {
          "description": "Información de referencia",
          "allOf": [
            {
              "$ref": "#/definitions/models.FirebaseMemberReferralData"
            }
          ]
        },
        "referred_id": {
          "description": "ID del referido",
          "type": "string"
        },
        "tags": {
          "description": "Etiquetas",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tank_photo": {
          "description": "Foto del tanque",
          "type": "string"
        },
        "tank_photos": {
          "description": "Fotos del tanque",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/models.TankPhoto"
          }
        },
        "timestamp": {
          "description": "Timestamp",
          "type": "number"
        }
      }
    },
    "models.UserPagination": {
      "type": "object",
      "properties": {
        "currentPage": {
          "type": "integer"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.User"
          }
        },
        "next": {
          "type": "integer"
        },
        "pagination": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "paginationCount": {
          "type": "integer"
        },
        "paginationSize": {
          "type": "integer"
        },
        "prev": {
          "type": "integer"
        }
      }
    },
    "models.UserPaymentInfo": {
      "type": "object",
      "properties": {
        "card_brand": {
          "description": "Marca de la tarjeta",
          "type": "string"
        },
        "card_cvv": {
          "description": "CVV de la tarjeta",
          "type": "string"
        },
        "cash": {
          "description": "Efectivo",
          "type": "number"
        },
        "credits": {
          "description": "Créditos",
          "type": "number"
        },
        "credits_auto_apply": {
          "description": "Aplicar créditos automáticamente",
          "type": "string"
        },
        "default_payment_method": {
          "description": "Método de pago por defecto",
          "type": "string"
        },
        "payarc_id": {
          "type": "string"
        }
      }
    },
    "utils.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        }
      }
    }
  }
}
